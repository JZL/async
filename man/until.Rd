% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/until.R
\name{until}
\alias{until}
\title{Repeatedly call task until test returns true}
\usage{
until(test_function, task, callback)
}
\arguments{
\item{test_function}{Synchronous truth test to perform before each
execution of \code{task}. Invoked without arguments.}

\item{task}{An async function which is called each time \code{test_function}
fails. Invoked with \code{(callback)}.}

\item{callback}{A callback which is called after the test function has
passed and repeated execution of \code{task} has stopped. \code{callback} will
be passed an error and any arguments passed to the final task's
callback. Invoked with \code{(err, [results])}.}
}
\value{
Task id.
}
\description{
Calls \code{callback} when stopped, or an error occurs. \code{callback} will be
passed an error and any arguments passed to the final task's
callback.
}
\details{
The inverse of \code{\link[=whilst]{whilst()}}.
}
\examples{
## Keep calling until it "returns" a number less than < 0.1
calls <- 0
number <- Inf
wait_for(until(
  function() number < 0.1,
  function(callback) {
    number <<- runif(1)
    calls <<- calls + 1
    callback(NULL, number)
  },
  function(err, res) print(res)
))
calls
}
\seealso{
Other async control flow: \code{\link{parallel_limit}},
  \code{\link{parallel}}, \code{\link{retryable}},
  \code{\link{retry}}, \code{\link{sequence}},
  \code{\link{waterfall}}, \code{\link{whilst}}
}
