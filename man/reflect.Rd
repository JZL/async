% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reflect.R
\name{reflect}
\alias{reflect}
\title{Safe wrapper of an async function}
\usage{
reflect(func)
}
\arguments{
\item{func}{Async function to wrap.}
}
\value{
The wrapper function that never returns with an error.
Instead the result object is a named list with entries \code{error} and
\code{value}.
}
\description{
Wraps the async function in another function that always completes with
a result object even when it errors.
}
\examples{
badfun <- asyncify(function() stop("oh no!"))
safefun <- reflect(badfun)

result <- NULL
wait_for(parallel(
  list(safefun, safefun, safefun),
  function(err, res) result <<- res
))
result
}
\seealso{
Other async utilities: \code{\link{asyncify}},
  \code{\link{syncify}}
}
