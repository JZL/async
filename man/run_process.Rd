% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/process.R
\name{run_process}
\alias{run_process}
\title{Asynchronous external process execution}
\usage{
run_process(command = NULL, args = character(), error_on_status = TRUE,
  wd = NULL, env = NULL, windows_verbatim_args = FALSE,
  windows_hide_window = FALSE, encoding = "")
}
\arguments{
\item{command}{Character scalar, the command to run.}

\item{args}{Character vector, arguments to the command.}

\item{error_on_status}{Whether to reject the referred value if the
program exits with a non-zero status.}

\item{wd}{Working directory of the process. If \code{NULL}, the current
working directory is used.}

\item{env}{Environment of the child process, a named character vector.
IF \code{NULL}, the environment of the parent is inherited.}

\item{windows_verbatim_args}{Whether to omit the escaping of the
command and the arguments on windows. Ignored on other platforms.}

\item{windows_hide_window}{Whether to hide the window of the
application on windows. Ignored on other platforms.}

\item{encoding}{The encoding to assume for \code{stdout} and
\code{stderr}. By default the encoding of the current locale is
used. Note that \code{processx} always reencodes the output of
both streams in UTF-8 currently.}
}
\value{
Deferred object.
}
\description{
Start an external process in the background, and report its completion
via a deferred.
}
\examples{
\dontrun{
afun <- function() {
  run_process("ls", "-l")$
    then(function(x) strsplit(x$stdout, "\\r?\\n")[[1]])
}
synchronise(afun())
}
}
