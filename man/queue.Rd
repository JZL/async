% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/queue.R
\name{queue}
\alias{queue}
\title{Asynchronous queue}
\description{
Create the queue with \code{\link[=make_queue]{make_queue()}}.
}
\section{Usage}{
\preformatted{q$get_length()
q$is_started()
q$get_concurrency()
q$is_paused()
q$get_running()
q$is_idle()

q$push(item, callback)
q$unshift(item, callback)
q$remove(test_function)
q$pause()
q$resume()

q$call_if_saturated(callback)
q$call_if_unsaturated(callback)
q$call_if_empty(callback)
q$call_if_drained(callback)
q$call_if_error(callback)
}
}

\section{Arguments}{

\describe{
\item{item}{An item to work on. It can be any object that the worker
function of the queue can interpret.}
\item{callback}{A callback function to call. See the details below
on how it will be called for the various methods.}
\item{test_function}{A test function that is called with the item
as the single argument. It must return a logical value, that is
\code{TRUE} is the item is to be removed from the queue.}
}
}

\section{Details}{

\code{$get_length()} returns the number of items in the queue.
Completed items are not included in the count.

\code{$is_started()} returns \code{TRUE} if the queue has already started
running workers. This happens when the first item is added, if the
queue is not paused. Otherwise it happens at a \code{$resume()} call.

\code{$get_concurrency()} returns the concurrency parameter of the queue.

\code{$is_paused()} returns whether the queue is paused.

\code{$get_running()} returns the number of items being processed. Only items
with running workers are included.

\code{$is_idle()} returns whether the queue is idle.

\code{$push(item, callback)} adds an item to the queue. If \code{callback} is not
\code{NULL}, then it must be a fucntion. This function will be called with
two arguments, the first one is the error object or message or \code{NULL} if
no error happened. The second one is the result of the worker on the
item.

\code{$unshift(item, callback)} is like \code{$push()} but it inserts the item at
the beginning of the queue.

\code{$remove(test_function)} removes all tasks from the queue that satisfy
a synchronous test function. The test function is called with the item
as the single argument, and must return \code{TRUE} if the item is to be
removed, and \code{FALSE} otherwise.

\code{$pause()} stops the queue. No more workers are started until
\code{$resume()} is called on the queue.

\code{$resume()} resumed a queue, that was stopped with \code{$pause()}.

\code{$call_if_saturated(callback)} sets the callback function to call when
the queue is saturated. The callback is called without any arguments.
Setting it to \code{NULL} cancels these calls.

\code{$call_if_unsaturated(callback)} sets the callback that is called when
the queue is unsaturated. The callback is called without any arguments.
Setting it to \code{NULL} cancels these calls.

\code{$call_if_empty(callback)} sets the callback that is called when
the queue is empty, i.e. no items are waiting to be executed.
The callback is called without any arguments. Setting it to \code{NULL}
cancels these calls.

\code{$call_if_drained(callback)} sets the callback that is called when there
are no running or waiting items in the queue. The callback is called
without any arguments. Setting it to \code{NULL} cancels these calls.

\code{q$call_if_error(callback)} sets the callback to call when a worker
reports an error. The callback will be called with two arguments, the
error object or message and the item that errored.
}

