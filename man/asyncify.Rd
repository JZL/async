% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/asyncify.R
\name{asyncify}
\alias{asyncify}
\title{Create an async task from a synchronous function}
\usage{
asyncify(func, return = TRUE)
}
\arguments{
\item{func}{The function to convert to asyncronous.}

\item{return}{Whether the callback has a return value argument, in
addition to the error. Most callbacks have return values, so they
have two arguments.}
}
\value{
A task, which has the same arguments as the original function,
plus an extra \code{callback} argument at the end. This function is called
after the original computation is done by \code{func}.
}
\description{
This is useful if you need the function in some asynchronous control
flow structure, e.g. \code{\link[=waterfall]{waterfall()}}.
}
\details{
Arguments passed to the wrapper function are passed to the wrap function
(except for the \code{callback} argument of course).
}
\examples{
f <- function(x) { Sys.sleep(1/100); x + 42 }
af <- asyncify(f)
amap(c(0, 42), af, function(err, res) print(res))
}
\seealso{
Other async utilities: \code{\link{reflect}},
  \code{\link{syncify}}
}
