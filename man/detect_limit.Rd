% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/detect_limit.R
\name{detect_limit}
\alias{detect_limit}
\title{Concurrency-limited version of \code{detect}}
\usage{
detect_limit(coll, iteratee, limit, callback)
}
\arguments{
\item{coll}{A collection to iterate over.}

\item{iteratee}{A truth test to apply to each item in \code{coll}.
The \code{iteratee} must complete with a logical flag value as its result.
Invoked with \code{(item, callback)}.}

\item{limit}{Maximum number of concurrent asynchronous tasks.}

\item{callback}{A callback which is called as soon as any iteratee
returns true, or after all the \code{iteratee} functions have finished.
Result will be the first item in the array that passes the truth test
(iteratee) or \code{NULL} if none passed. Invoked with \code{(err, result)}.}
}
\value{
Task id.
}
\description{
The same as \code{\link[=detect]{detect()}}, but the number of parallel asynchronous tasks
is limited.
}
\examples{
num <- 0
task <- function(x, callback) {
  num <<- num + 1
  print(paste("Running:", num))
  set_timeout(1/10, function() { num <<- num - 1; callback(NULL, FALSE) })
}

result <- "not null"
wait_for(detect_limit(1:5, task, 2, function(err, res) result <<- res))
result
}
\seealso{
Other async iterators: \code{\link{detect_series}},
  \code{\link{detect}}, \code{\link{each}},
  \code{\link{every}}, \code{\link{filter}},
  \code{\link{some}}
}
